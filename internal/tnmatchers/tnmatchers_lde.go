// Code generated by ldetool --go-string tnmatchers.lde. DO NOT EDIT.

package tnmatchers

import (
	"fmt"
	"strconv"
	"strings"
)

var constBytesArrayRsbrckByte = "]byte"

// BytesArray ...
type BytesArray struct {
	Rest string
	Size int
}

// Extract ...
func (p *BytesArray) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var pos int
	var tmp string
	var tmpInt int64

	// Checks if the rest starts with '[' and pass it
	if len(p.Rest) >= 1 && p.Rest[0] == '[' {
		p.Rest = p.Rest[1:]
	} else {
		return false, nil
	}

	// Take until "]byte" as Size(int)
	pos = strings.Index(p.Rest, constBytesArrayRsbrckByte)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constBytesArrayRsbrckByte):]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Size(int): %s", tmp, err)
	}
	p.Size = int(tmpInt)

	return true, nil
}
